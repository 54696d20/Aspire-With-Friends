@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Navigation
@inject IAccessTokenProvider TokenProvider
@inject ILogger<App> Logger

<CascadingAuthenticationState>
    <MudThemeProvider>
        <MudSnackbarProvider MaxDisplayedSnackbars="3" PreventDuplicates="true">
            <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="HandleNavigationAsync">
                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <NotAuthorized Context="unauthContext">
                            @if (unauthContext.User.Identity?.IsAuthenticated != true)
                            {
                                <RedirectToLogin />
                            }
                            else
                            {
                                <p role="alert">You are not authorized to access this resource.</p>
                            }
                        </NotAuthorized>
                    </AuthorizeRouteView>
                </Found>
                <NotFound>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <p>Sorry, there's nothing at this address.</p>
                    </LayoutView>
                </NotFound>
            </Router>
        </MudSnackbarProvider>
    </MudThemeProvider>
</CascadingAuthenticationState>

@code {
    private async Task HandleNavigationAsync(NavigationContext context)
    {
        var publicPaths = new[]
        {
            "authentication/login",
            "authentication/login-callback",
            "authentication/logout",
            "logout"
        };

        var path = new Uri(context.Path, UriKind.RelativeOrAbsolute).ToString().TrimStart('/');

        // Don't redirect on login/logout routes
        if (publicPaths.Any(p => path.StartsWith(p, StringComparison.OrdinalIgnoreCase)))
            return;

        var result = await TokenProvider.RequestAccessToken();

        if (!result.TryGetToken(out var _))
        {
            Navigation.NavigateTo("authentication/login", forceLoad: true);
        }
    }
}
